// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9XM4zeTVVyXosWSTzSvkg2
// Component: g5tc5CVcyBLV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9XM4zeTVVyXosWSTzSvkg2/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: g5tc5CVcyBLV/css

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  copyright?: Flex__<"div">;
  about?: Flex__<"div">;
  links?: Flex__<"div">;
  links2?: Flex__<"div">;
  services?: Flex__<"a"> & Partial<LinkProps>;
  aboutUs?: Flex__<"a"> & Partial<LinkProps>;
  gallery?: Flex__<"a"> & Partial<LinkProps>;
  contact2?: Flex__<"a"> & Partial<LinkProps>;
  contact?: Flex__<"div">;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"copyright"}
          data-plasmic-override={overrides.copyright}
          className={classNames(projectcss.all, sty.copyright)}
        >
          <div
            data-plasmic-name={"about"}
            data-plasmic-override={overrides.about}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.about
            )}
          >
            {"ABOUT"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vytO6
            )}
          >
            {
              "\u00a9 2024 Elegant Ink by MB.\nABN 76 830 713 314. \nAll rights Reserved. "
            }
          </div>
        </div>
        <div
          data-plasmic-name={"links"}
          data-plasmic-override={overrides.links}
          className={classNames(projectcss.all, sty.links)}
        >
          <div
            data-plasmic-name={"links2"}
            data-plasmic-override={overrides.links2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.links2
            )}
          >
            {"LINKS"}
          </div>
          <Stack__
            as={PlasmicLink__}
            data-plasmic-name={"services"}
            data-plasmic-override={overrides.services}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.services)}
            component={Link}
            href={`/services`}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lWJff
              )}
            >
              {"Services"}
            </div>
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            data-plasmic-name={"aboutUs"}
            data-plasmic-override={overrides.aboutUs}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.aboutUs)}
            component={Link}
            href={`/about-us`}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yFGF
              )}
            >
              {"About Us"}
            </div>
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            data-plasmic-name={"gallery"}
            data-plasmic-override={overrides.gallery}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.gallery)}
            component={Link}
            href={`/gallery`}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d2EY1
              )}
            >
              {"Gallery"}
            </div>
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            data-plasmic-name={"contact2"}
            data-plasmic-override={overrides.contact2}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.contact2)}
            component={Link}
            href={`/contact`}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"contact"}
              data-plasmic-override={overrides.contact}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.contact
              )}
            >
              {"Contact Us"}
            </div>
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "copyright",
    "about",
    "links",
    "links2",
    "services",
    "aboutUs",
    "gallery",
    "contact2",
    "contact"
  ],
  columns: [
    "columns",
    "copyright",
    "about",
    "links",
    "links2",
    "services",
    "aboutUs",
    "gallery",
    "contact2",
    "contact"
  ],
  copyright: ["copyright", "about"],
  about: ["about"],
  links: [
    "links",
    "links2",
    "services",
    "aboutUs",
    "gallery",
    "contact2",
    "contact"
  ],
  links2: ["links2"],
  services: ["services"],
  aboutUs: ["aboutUs"],
  gallery: ["gallery"],
  contact2: ["contact2", "contact"],
  contact: ["contact"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  copyright: "div";
  about: "div";
  links: "div";
  links2: "div";
  services: "a";
  aboutUs: "a";
  gallery: "a";
  contact2: "a";
  contact: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    copyright: makeNodeComponent("copyright"),
    about: makeNodeComponent("about"),
    links: makeNodeComponent("links"),
    links2: makeNodeComponent("links2"),
    services: makeNodeComponent("services"),
    aboutUs: makeNodeComponent("aboutUs"),
    gallery: makeNodeComponent("gallery"),
    contact2: makeNodeComponent("contact2"),
    contact: makeNodeComponent("contact"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
