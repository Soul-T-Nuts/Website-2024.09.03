// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9XM4zeTVVyXosWSTzSvkg2
// Component: bBEpEb60SKxb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9XM4zeTVVyXosWSTzSvkg2/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: bBEpEb60SKxb/css

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: Flex__<"div">;
  nameLogo?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  name?: Flex__<"a"> & Partial<LinkProps>;
  links?: Flex__<"div">;
  home?: Flex__<"a"> & Partial<LinkProps>;
  services?: Flex__<"a"> & Partial<LinkProps>;
  about?: Flex__<"a"> & Partial<LinkProps>;
  gallery?: Flex__<"a"> & Partial<LinkProps>;
  contact?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"nameLogo"}
        data-plasmic-override={overrides.nameLogo}
        className={classNames(projectcss.all, sty.nameLogo)}
      >
        <Embed
          data-plasmic-name={"embedHtml"}
          data-plasmic-override={overrides.embedHtml}
          className={classNames("__wab_instance", sty.embedHtml)}
          code={
            "<!-- Google tag (gtag.js) -->\r\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-1F85PP6LR6\"></script>\r\n<script>\r\n  window.dataLayer = window.dataLayer || [];\r\n  function gtag(){dataLayer.push(arguments);}\r\n  gtag('js', new Date());\r\n\r\n  gtag('config', 'G-1F85PP6LR6');\r\n</script>"
          }
        />

        <div className={classNames(projectcss.all, sty.freeBox__phkTl)}>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={`/`}
            onClick={async event => {
              const $steps = {};
            }}
            platform={"nextjs"}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"30px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/elegant_new_website_test_3_9_24/images/logoPng.png",
                fullWidth: 96,
                fullHeight: 96,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.name
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"ELEGANT INK"}
          </PlasmicLink__>
        </div>
      </div>
      <div
        data-plasmic-name={"links"}
        data-plasmic-override={overrides.links}
        className={classNames(projectcss.all, sty.links)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__aoMlU)}>
          <PlasmicLink__
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.home
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"HOME"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"services"}
            data-plasmic-override={overrides.services}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.services
            )}
            component={Link}
            href={`/services`}
            platform={"nextjs"}
          >
            {"SERVICES"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"about"}
            data-plasmic-override={overrides.about}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.about
            )}
            component={Link}
            href={`/about-us`}
            platform={"nextjs"}
          >
            {"ABOUT"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"gallery"}
            data-plasmic-override={overrides.gallery}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.gallery
            )}
            component={Link}
            href={`/gallery`}
            platform={"nextjs"}
          >
            {"GALLERY"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"contact"}
            data-plasmic-override={overrides.contact}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.contact
            )}
            component={Link}
            href={`/contact`}
            platform={"nextjs"}
          >
            {"CONTACT"}
          </PlasmicLink__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nameLogo",
    "embedHtml",
    "link",
    "img",
    "name",
    "links",
    "home",
    "services",
    "about",
    "gallery",
    "contact"
  ],
  nameLogo: ["nameLogo", "embedHtml", "link", "img", "name"],
  embedHtml: ["embedHtml"],
  link: ["link", "img"],
  img: ["img"],
  name: ["name"],
  links: ["links", "home", "services", "about", "gallery", "contact"],
  home: ["home"],
  services: ["services"],
  about: ["about"],
  gallery: ["gallery"],
  contact: ["contact"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nameLogo: "div";
  embedHtml: typeof Embed;
  link: "a";
  img: typeof PlasmicImg__;
  name: "a";
  links: "div";
  home: "a";
  services: "a";
  about: "a";
  gallery: "a";
  contact: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nameLogo: makeNodeComponent("nameLogo"),
    embedHtml: makeNodeComponent("embedHtml"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    _name: makeNodeComponent("name"),
    links: makeNodeComponent("links"),
    home: makeNodeComponent("home"),
    services: makeNodeComponent("services"),
    about: makeNodeComponent("about"),
    gallery: makeNodeComponent("gallery"),
    contact: makeNodeComponent("contact"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
