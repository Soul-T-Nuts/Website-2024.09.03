// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9XM4zeTVVyXosWSTzSvkg2
// Component: EFe7AN1SJF-h

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FloatingMenu from "../../FloatingMenu"; // plasmic-import: 4mFHf-oFerNL/component
import Header from "../../Header"; // plasmic-import: bBEpEb60SKxb/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import FollowUs from "../../FollowUs"; // plasmic-import: ewnk8ZUxnW_n/component
import Footer from "../../Footer"; // plasmic-import: g5tc5CVcyBLV/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsczuL3NBhJd9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CzuL3-nBhJd9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9XM4zeTVVyXosWSTzSvkg2/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: EFe7AN1SJF-h/css

createPlasmicElementProxy;

export type PlasmicAboutUs__VariantMembers = {};
export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  about?: Flex__<"div">;
  floatingMenu?: Flex__<typeof FloatingMenu>;
  header?: Flex__<typeof Header>;
  hero?: Flex__<"section">;
  mobileHero?: Flex__<"section">;
  text?: Flex__<"div">;
  photos?: Flex__<"div">;
  text2?: Flex__<"div">;
  photos2?: Flex__<"div">;
  faQs?: Flex__<"section">;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  accordion?: Flex__<typeof AntdAccordion>;
  cancelationPolicy?: Flex__<"section">;
  followUs?: Flex__<typeof FollowUs>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultAboutUsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "floatingMenu.plasmicAntd5SingleCollapseOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsczuL3NBhJd9()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicAboutUs.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAboutUs.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAboutUs.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicAboutUs.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicAboutUs.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicAboutUs.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicAboutUs.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicAboutUs.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicAboutUs.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"about"}
          data-plasmic-override={overrides.about}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.about
          )}
        >
          <FloatingMenu
            data-plasmic-name={"floatingMenu"}
            data-plasmic-override={overrides.floatingMenu}
            className={classNames("__wab_instance", sty.floatingMenu)}
            onPlasmicAntd5SingleCollapseOpenChange={async (
              ...eventArgs: any
            ) => {
              generateStateOnChangeProp($state, [
                "floatingMenu",
                "plasmicAntd5SingleCollapseOpen"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />

          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__b5G)}>
              <div className={classNames(projectcss.all, sty.freeBox___8A59W)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6F8U1
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F2F2F2" }}
                    >
                      {"About us"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mPK)} />
            </div>
          </section>
          <section
            data-plasmic-name={"mobileHero"}
            data-plasmic-override={overrides.mobileHero}
            className={classNames(projectcss.all, sty.mobileHero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__goems)}>
              <div className={classNames(projectcss.all, sty.freeBox__m1Lar)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kfUnp
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F2F2F2" }}
                    >
                      {"About us"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section__zyrJe)}>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__brChi)}
              duration={1500}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lsIiL)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.text)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zjr60
                    )}
                  >
                    {"Elegant Ink: Permanent makeup artistry"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qanNp
                    )}
                  >
                    {
                      "At Elegant Ink, we are dedicated to providing high-quality permanent makeup services that enhance your natural beauty and boost your confidence. Our skilled artists spcialise in creating natural-looking, long-lasting makeup solutions. Experience the convenience and beauty of permanent makeup with Elegant Ink. We strive to exceed your expectations and ensure your complete satisfaction with every visit"
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"photos"}
                  data-plasmic-override={overrides.photos}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.photos)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__x2W1Y)}
                  >
                    <PlasmicImg__
                      alt={
                        "The business owner proudly holding a certificate after completing a course on permanent makeup artistry, showcasing their expertise and commitment to professional cosmetic services."
                      }
                      className={classNames(sty.img___50Ko8)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/elegant_new_website_test_3_9_24/images/img81172Jpg.jpg",
                        fullWidth: 627,
                        fullHeight: 836,
                        aspectRatio: undefined
                      }}
                      title={
                        "Certified Permanent Makeup Artist: Expertise You Can Trust."
                      }
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            </Reveal>
          </section>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <section className={classNames(projectcss.all, sty.section__dxzNl)}>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__sz9C)}
                triggerOnce={true}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qhgSi)}
                >
                  <div
                    data-plasmic-name={"text2"}
                    data-plasmic-override={overrides.text2}
                    className={classNames(projectcss.all, sty.text2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sgkRe
                      )}
                    >
                      {"Elegant Ink: Permanent makeup artistry"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kKYsm
                      )}
                    >
                      {
                        "At Elegant Ink, we are dedicated to providing high-quality permanent makeup services that enhance your natural beauty and boost your confidence. Our skilled artists spcialise in creating natural-looking, long-lasting makeup solutions. Experience the convenience and beauty of permanent makeup with Elegant Ink. We strive to exceed your expectations and ensure your complete satisfaction with every visit"
                      }
                    </div>
                  </div>
                </Stack__>
              </Reveal>
              <Stack__
                as={"div"}
                data-plasmic-name={"photos2"}
                data-plasmic-override={overrides.photos2}
                hasGap={true}
                className={classNames(projectcss.all, sty.photos2)}
              >
                <PlasmicImg__
                  alt={
                    "The business owner proudly holding a certificate after completing a course on permanent makeup artistry, showcasing their expertise and commitment to professional cosmetic services."
                  }
                  className={classNames(sty.img___28Htt)}
                  displayHeight={"250px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/elegant_new_website_test_3_9_24/images/img81172Jpg.jpg",
                    fullWidth: 627,
                    fullHeight: 836,
                    aspectRatio: undefined
                  }}
                  title={
                    "Certified Permanent Makeup Artist: Expertise You Can Trust."
                  }
                />
              </Stack__>
            </section>
          ) : null}
          <section
            data-plasmic-name={"faQs"}
            data-plasmic-override={overrides.faQs}
            className={classNames(projectcss.all, sty.faQs)}
          >
            <CmsQueryRepeater
              data-plasmic-name={"cmsDataFetcher"}
              data-plasmic-override={overrides.cmsDataFetcher}
              className={classNames("__wab_instance", sty.cmsDataFetcher)}
              desc={false}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ekpMz
                      )}
                    >
                      {"No matching published entries found."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0}
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o5OiK
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              noAutoRepeat={false}
              noLayout={false}
              orderBy={"index"}
              table={"faQs"}
              useDraft={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__alwr)}
                  >
                    {(() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "accordion",
                          "activePanelId"
                        ]),
                        bordered: true,
                        className: classNames("__wab_instance", sty.accordion),
                        items: (
                          <React.Fragment>
                            <AntdAccordionItem
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__h2AmT
                              )}
                              headerClass={classNames({
                                [sty["pcls_Buzmi_sH3Riu"]]: true
                              })}
                              id={(() => {
                                try {
                                  return $ctx.plasmicCmsFaQsItem.data.index;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3MRv7
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $ctx.plasmicCmsFaQsItem.data
                                          .title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "First Item";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              }
                              showArrow={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gqX0K
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $ctx.plasmicCmsFaQsItem.data
                                        .answer;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "First Children";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </AntdAccordionItem>
                            <AntdAccordionItem
                              children={null}
                              className={classNames(
                                "__wab_instance",
                                sty.accordionItem__lczAs
                              )}
                              id={"0"}
                              label2={null}
                              showArrow={true}
                            />
                          </React.Fragment>
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "activePanelId",
                            ["accordion", "activePanelId"],
                            AntdAccordion_Helpers
                          ).apply(null, eventArgs);
                        }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activePanelId",
                            plasmicStateName: "accordion.activePanelId"
                          }
                        ],
                        [],
                        AntdAccordion_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdAccordion
                          data-plasmic-name={"accordion"}
                          data-plasmic-override={overrides.accordion}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                )}
              </DataCtxReader__>
            </CmsQueryRepeater>
          </section>
          <section
            data-plasmic-name={"cancelationPolicy"}
            data-plasmic-override={overrides.cancelationPolicy}
            className={classNames(projectcss.all, sty.cancelationPolicy)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0UTqt
              )}
            >
              {"Cancellation Policy"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zmovC
              )}
            >
              {
                "We understand that sometimes unforeseen circumstances arise, and you may need to cancel or reschedule your appointment. To ensure fairness to both our clients and our business, we have implemented the following cancellation policy:\n\n1. **Cancellation within 24 hours:**\n   - If you cancel your appointment within 24 hours of the scheduled time, you will be eligible for a refund of 80% of the total service price.\n   - The remaining 20% covers administrative costs and the time reserved for your appointment.\n\n2. **No-shows:**\n   - If you fail to show up for your appointment without prior notice, the full service fee will be charged.\n\nWe appreciate your understanding and cooperation. If you have any questions or need to reschedule, please don't hesitate to contact us.\n\nThank you for choosing our services!"
              }
            </div>
          </section>
          <FollowUs
            data-plasmic-name={"followUs"}
            data-plasmic-override={overrides.followUs}
            className={classNames("__wab_instance", sty.followUs)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  about: [
    "about",
    "floatingMenu",
    "header",
    "hero",
    "mobileHero",
    "text",
    "photos",
    "text2",
    "photos2",
    "faQs",
    "cmsDataFetcher",
    "accordion",
    "cancelationPolicy",
    "followUs",
    "footer"
  ],
  floatingMenu: ["floatingMenu"],
  header: ["header"],
  hero: ["hero"],
  mobileHero: ["mobileHero"],
  text: ["text"],
  photos: ["photos"],
  text2: ["text2"],
  photos2: ["photos2"],
  faQs: ["faQs", "cmsDataFetcher", "accordion"],
  cmsDataFetcher: ["cmsDataFetcher", "accordion"],
  accordion: ["accordion"],
  cancelationPolicy: ["cancelationPolicy"],
  followUs: ["followUs"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  about: "div";
  floatingMenu: typeof FloatingMenu;
  header: typeof Header;
  hero: "section";
  mobileHero: "section";
  text: "div";
  photos: "div";
  text2: "div";
  photos2: "div";
  faQs: "section";
  cmsDataFetcher: typeof CmsQueryRepeater;
  accordion: typeof AntdAccordion;
  cancelationPolicy: "section";
  followUs: typeof FollowUs;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "about") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("about"),
  {
    // Helper components rendering sub-elements
    floatingMenu: makeNodeComponent("floatingMenu"),
    header: makeNodeComponent("header"),
    hero: makeNodeComponent("hero"),
    mobileHero: makeNodeComponent("mobileHero"),
    text: makeNodeComponent("text"),
    photos: makeNodeComponent("photos"),
    text2: makeNodeComponent("text2"),
    photos2: makeNodeComponent("photos2"),
    faQs: makeNodeComponent("faQs"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    accordion: makeNodeComponent("accordion"),
    cancelationPolicy: makeNodeComponent("cancelationPolicy"),
    followUs: makeNodeComponent("followUs"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Elegant Ink - About Us",
      description:
        "At Elegant Ink, we are dedicated to providing high-quality permanent makeup services that enhance your natural beauty and boost your confidence.",
      ogImageSrc:
        "https://site-assets.plasmic.app/f5460de3c47373fc7c1b77c39e4e4905.png",
      canonical: "https://elegantink.au/"
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
