// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9XM4zeTVVyXosWSTzSvkg2
// Component: sv-gnnUt8_1e

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FloatingMenu from "../../FloatingMenu"; // plasmic-import: 4mFHf-oFerNL/component
import Header from "../../Header"; // plasmic-import: bBEpEb60SKxb/component
import Button from "../../Button"; // plasmic-import: KQqibFRoHOLm/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import ButtonDark from "../../ButtonDark"; // plasmic-import: mZnYg1dSLNOU/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Review from "../../Review"; // plasmic-import: 5Xn_beX2cxMf/component
import FollowUs from "../../FollowUs"; // plasmic-import: ewnk8ZUxnW_n/component
import Footer from "../../Footer"; // plasmic-import: g5tc5CVcyBLV/component

import { useScreenVariants as useScreenVariantsczuL3NBhJd9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CzuL3-nBhJd9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9XM4zeTVVyXosWSTzSvkg2/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: sv-gnnUt8_1e/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  home?: Flex__<"div">;
  floatingMenu?: Flex__<typeof FloatingMenu>;
  header?: Flex__<typeof Header>;
  hero?: Flex__<"section">;
  bookButton?: Flex__<typeof Button>;
  mobileHero?: Flex__<"section">;
  bookButton2?: Flex__<typeof Button>;
  photos?: Flex__<"div">;
  text?: Flex__<"div">;
  aboutUsButton?: Flex__<typeof ButtonDark>;
  photos2?: Flex__<"div">;
  text2?: Flex__<"div">;
  aboutUsButton2?: Flex__<typeof ButtonDark>;
  reviews?: Flex__<"section">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  followUs?: Flex__<typeof FollowUs>;
  bookButton3?: Flex__<typeof Button>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "floatingMenu.plasmicAntd5SingleCollapseOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsczuL3NBhJd9()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.home
          )}
        >
          <FloatingMenu
            data-plasmic-name={"floatingMenu"}
            data-plasmic-override={overrides.floatingMenu}
            className={classNames("__wab_instance", sty.floatingMenu)}
            onPlasmicAntd5SingleCollapseOpenChange={generateStateOnChangeProp(
              $state,
              ["floatingMenu", "plasmicAntd5SingleCollapseOpen"]
            )}
          />

          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___6WbBi)}>
              <div className={classNames(projectcss.all, sty.freeBox__qzQjM)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w1CBw
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F2F2F2" }}
                    >
                      {"wake up every morning with perfect brows"}
                    </span>
                  </React.Fragment>
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fup8L
                  )}
                  component={Link}
                  href={
                    "https://book.squareup.com/appointments/r9klmrgg5nbbgr/location/LF79VDDS92H58/services"
                  }
                  platform={"nextjs"}
                  target={"_blank"}
                  title={"Book now"}
                >
                  <Button
                    data-plasmic-name={"bookButton"}
                    data-plasmic-override={overrides.bookButton}
                    className={classNames("__wab_instance", sty.bookButton)}
                    target={false}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rzBlq
                      )}
                    >
                      {"Schedule your consultation now"}
                    </div>
                  </Button>
                </PlasmicLink__>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___084Kr)}
              />
            </div>
          </section>
          <section
            data-plasmic-name={"mobileHero"}
            data-plasmic-override={overrides.mobileHero}
            className={classNames(projectcss.all, sty.mobileHero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__whHuG)}>
              <div className={classNames(projectcss.all, sty.freeBox__k2O)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sMGvx
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F2F2F2" }}
                    >
                      {"wake up every morning with perfect brows"}
                    </span>
                  </React.Fragment>
                </div>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__nqOaX
                  )}
                  component={Link}
                  href={
                    "https://book.squareup.com/appointments/r9klmrgg5nbbgr/location/LF79VDDS92H58/services"
                  }
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <Button
                    data-plasmic-name={"bookButton2"}
                    data-plasmic-override={overrides.bookButton2}
                    className={classNames("__wab_instance", sty.bookButton2)}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l5BlO
                      )}
                    >
                      {"Schedule your consultation now"}
                    </div>
                  </Button>
                </PlasmicLink__>
              </div>
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___5RBp7)}>
            <Reveal
              className={classNames("__wab_instance", sty.reveal__qn82E)}
              duration={1500}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iOwLd)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"photos"}
                  data-plasmic-override={overrides.photos}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.photos)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__syQfA)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___8BQP)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"56.25%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/elegant_new_website_test_3_9_24/images/img78522Jpg.jpg",
                        fullWidth: 627,
                        fullHeight: 836,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__iwo03)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"56.25%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/elegant_new_website_test_3_9_24/images/screenshot202407212250282Png.png",
                        fullWidth: 1008,
                        fullHeight: 2244,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.text)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7ZtwA
                    )}
                  >
                    {"About us"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eibvr
                    )}
                  >
                    {
                      "Our nano-machine hair strokes and ombre shading technique will give you natural-looking, fuller permanent eybrows"
                    }
                  </div>
                  <ButtonDark
                    data-plasmic-name={"aboutUsButton"}
                    data-plasmic-override={overrides.aboutUsButton}
                    className={classNames("__wab_instance", sty.aboutUsButton)}
                    link={`/about-us`}
                  >
                    {"Learn more"}
                  </ButtonDark>
                </Stack__>
              </Stack__>
            </Reveal>
          </section>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <section className={classNames(projectcss.all, sty.section__xCj1)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"photos2"}
                data-plasmic-override={overrides.photos2}
                hasGap={true}
                className={classNames(projectcss.all, sty.photos2)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__p7PkV)}
                  displayHeight={"250px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/elegant_new_website_test_3_9_24/images/img78522Jpg.jpg",
                    fullWidth: 627,
                    fullHeight: 836,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__q9OOv)}
                  displayHeight={"250px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/elegant_new_website_test_3_9_24/images/screenshot202407212250282Png.png",
                    fullWidth: 1008,
                    fullHeight: 2244,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Reveal
                className={classNames("__wab_instance", sty.reveal__cfU23)}
                triggerOnce={true}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rzQjS)}
                >
                  <div
                    data-plasmic-name={"text2"}
                    data-plasmic-override={overrides.text2}
                    className={classNames(projectcss.all, sty.text2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lqMaW
                      )}
                    >
                      {"About us"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ytR4
                      )}
                    >
                      {
                        "Our nano-machine hair strokes and ombre shading technique will give you natural-looking, fuller permanent eybrows"
                      }
                    </div>
                    <ButtonDark
                      data-plasmic-name={"aboutUsButton2"}
                      data-plasmic-override={overrides.aboutUsButton2}
                      className={classNames(
                        "__wab_instance",
                        sty.aboutUsButton2
                      )}
                      link={`/about-us`}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hhq9N
                        )}
                      >
                        {"Learn more"}
                      </div>
                    </ButtonDark>
                  </div>
                </Stack__>
              </Reveal>
            </section>
          ) : null}
          <section
            data-plasmic-name={"reviews"}
            data-plasmic-override={overrides.reviews}
            className={classNames(projectcss.all, sty.reviews)}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal__iHeid)}
              delay={10}
              effect={"fade"}
              triggerOnce={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ju6)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nShMt
                  )}
                >
                  {"Reviews"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e9Ndg
                  )}
                >
                  {"Here's what our customers have to say about us"}
                </div>
                {(() => {
                  const child$Props = {
                    arrows: true,
                    autoplay: true,
                    autoplaySpeed: 3000,
                    beforeChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ),
                    centerMode: true,
                    className: classNames("__wab_instance", sty.sliderCarousel),
                    cssEase: "linear",
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel__slider"],
                    speed: 1000
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel"}
                      data-plasmic-override={overrides.sliderCarousel}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7CxMs
                        )}
                      >
                        <Review
                          className={classNames(
                            "__wab_instance",
                            sty.review__urIdM
                          )}
                          name={"Theodora B."}
                          review={
                            "I recently had my eyebrows and lips tattooed by Maja she did an amazing job and everything looked exactly how I wanted it. I highly recommend Elegant ink to anyone looking to get cosmetic tattooing. You won't be disappointed."
                          }
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cpM66
                        )}
                      >
                        <Review
                          className={classNames(
                            "__wab_instance",
                            sty.review__g3Gb2
                          )}
                          name={"Merle V."}
                          review={
                            "Very happy with the results of my eyebrows. Maja was very professional and she listened to what I wanted and provided advice on what was best."
                          }
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lWlgD
                        )}
                      >
                        <Review
                          className={classNames(
                            "__wab_instance",
                            sty.review__jtLmi
                          )}
                          name={"Aleks P."}
                          review={
                            "Wow! That's all I can say. Absolutely amazed at how my eyebrows and lips turned out."
                          }
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__paVyd
                        )}
                      >
                        <Review
                          className={classNames(
                            "__wab_instance",
                            sty.review__vfqM
                          )}
                          name={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w94Bx
                              )}
                            >
                              {"Dani G."}
                            </div>
                          }
                          review={
                            "I love my newly tatted lips! The consultation was perfect and really helped me figure out what colour was perfect for me. Great service and ensured my comfort was maintained throughout the process. I can\u2019t wait to get my brows done next!"
                          }
                        />
                      </div>
                    </SliderWrapper>
                  );
                })()}
              </div>
            </Reveal>
          </section>
          <FollowUs
            data-plasmic-name={"followUs"}
            data-plasmic-override={overrides.followUs}
            className={classNames("__wab_instance", sty.followUs)}
          />

          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__h5Q3E
            )}
            component={Link}
            href={
              "https://book.squareup.com/appointments/r9klmrgg5nbbgr/location/LF79VDDS92H58/services"
            }
            platform={"nextjs"}
            target={"_blank"}
            title={"Book now"}
          >
            <Button
              data-plasmic-name={"bookButton3"}
              data-plasmic-override={overrides.bookButton3}
              className={classNames("__wab_instance", sty.bookButton3)}
              target={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rmXuh
                )}
              >
                {"Book now"}
              </div>
            </Button>
          </PlasmicLink__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: [
    "home",
    "floatingMenu",
    "header",
    "hero",
    "bookButton",
    "mobileHero",
    "bookButton2",
    "photos",
    "text",
    "aboutUsButton",
    "photos2",
    "text2",
    "aboutUsButton2",
    "reviews",
    "sliderCarousel",
    "followUs",
    "bookButton3",
    "footer"
  ],
  floatingMenu: ["floatingMenu"],
  header: ["header"],
  hero: ["hero", "bookButton"],
  bookButton: ["bookButton"],
  mobileHero: ["mobileHero", "bookButton2"],
  bookButton2: ["bookButton2"],
  photos: ["photos"],
  text: ["text", "aboutUsButton"],
  aboutUsButton: ["aboutUsButton"],
  photos2: ["photos2"],
  text2: ["text2", "aboutUsButton2"],
  aboutUsButton2: ["aboutUsButton2"],
  reviews: ["reviews", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"],
  followUs: ["followUs"],
  bookButton3: ["bookButton3"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  home: "div";
  floatingMenu: typeof FloatingMenu;
  header: typeof Header;
  hero: "section";
  bookButton: typeof Button;
  mobileHero: "section";
  bookButton2: typeof Button;
  photos: "div";
  text: "div";
  aboutUsButton: typeof ButtonDark;
  photos2: "div";
  text2: "div";
  aboutUsButton2: typeof ButtonDark;
  reviews: "section";
  sliderCarousel: typeof SliderWrapper;
  followUs: typeof FollowUs;
  bookButton3: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    floatingMenu: makeNodeComponent("floatingMenu"),
    header: makeNodeComponent("header"),
    hero: makeNodeComponent("hero"),
    bookButton: makeNodeComponent("bookButton"),
    mobileHero: makeNodeComponent("mobileHero"),
    bookButton2: makeNodeComponent("bookButton2"),
    photos: makeNodeComponent("photos"),
    text: makeNodeComponent("text"),
    aboutUsButton: makeNodeComponent("aboutUsButton"),
    photos2: makeNodeComponent("photos2"),
    text2: makeNodeComponent("text2"),
    aboutUsButton2: makeNodeComponent("aboutUsButton2"),
    reviews: makeNodeComponent("reviews"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    followUs: makeNodeComponent("followUs"),
    bookButton3: makeNodeComponent("bookButton3"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Elegant Ink",
      description:
        "At Elegant Ink, we are dedicated to providing high-quality permanent makeup services that enhance your natural beauty and boost your confidence.",
      ogImageSrc:
        "https://site-assets.plasmic.app/f5460de3c47373fc7c1b77c39e4e4905.png",
      canonical: "https://elegantink.au/"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
